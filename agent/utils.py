from pydantic import BaseModel, Field, computed_field
from typing import List


class Analyst(BaseModel):
    """Schema describing an analyst persona for LLM-structured output."""

    name: str = Field(description="Name of the analyst.")
    role: str = Field(description="Role of the analyst in the context of the topic.")
    affiliation: str = Field(description="Primary affiliation of the analyst.")
    description: str = Field(description="Description of the analyst focus, concerns, and motives.")

    @computed_field
    @property
    def persona(self) -> str:
        """Return a human-readable persona string composed from the analyst's fields."""
        return (
            f"Name: {self.name}\n"
            f"Role: {self.role}\n"
            f"Affiliation: {self.affiliation}\n"
            f"Description: {self.description}\n"
        )


class Perspectives(BaseModel):
    """Container schema aggregating multiple Analyst entries to capture diverse perspectives."""

    analysts: List[Analyst] = Field(description="Comprehensive list of analysts with their roles and affiliations.")


class SearchQuery(BaseModel):
    """Schema for a retrieval search-query generated by the LLM."""

    search_query: str = Field(default=None, description="Search query for retrieval.")
